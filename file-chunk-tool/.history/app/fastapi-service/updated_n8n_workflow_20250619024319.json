{
  "name": "Audio Notes with File Chunking",
  "nodes": [
    {
      "parameters": {
        "pollTimes": {
          "item": [
            {
              "mode": "everyMinute"
            }
          ]
        },
        "triggerOn": "specificFolder",
        "folderToWatch": {
          "__rl": true,
          "value": "https://drive.google.com/drive/u/0/folders/1J0a7oleiyDbVY_9crAcbaXec0Uxb4x2E",
          "mode": "url"
        },
        "event": "fileCreated",
        "options": {}
      },
      "name": "Google Drive Trigger",
      "type": "n8n-nodes-base.googleDriveTrigger",
      "typeVersion": 1,
      "position": [
        -200,
        0
      ],
      "id": "google-drive-trigger"
    },
    {
      "parameters": {
        "url": "=https://www.googleapis.com/drive/v3/files/{{ $json[\"id\"] }}?alt=media",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "googleDriveOAuth2Api",
        "options": {}
      },
      "name": "Download File",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        0,
        0
      ],
      "id": "download-file"
    },
    {
      "parameters": {
        "jsCode": "const fileSizeKb = $json.size / 1024;\nconst estimatedDurationMin = fileSizeKb / 200;\nconst costPerMin = 0.006;\n\nreturn [{\n  json: {\n    filename: $json.name || 'Unknown',\n    estimated_duration_minutes: parseFloat(estimatedDurationMin.toFixed(2)),\n    duration_seconds: Math.round(estimatedDurationMin * 60),\n    cost: parseFloat((estimatedDurationMin * costPerMin).toFixed(4)),\n    token_count: 0,\n    file_size_mb: parseFloat((Number($json.size) / 1000000).toFixed(2))\n  }\n}];"
      },
      "name": "Calculate Metadata",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        200,
        0
      ],
      "id": "calculate-metadata"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "version": 2,
          "conditions": [
            {
              "id": "file-size-check",
              "leftValue": "={{ $json.file_size_mb }}",
              "rightValue": 25,
              "operator": {
                "type": "number",
                "operation": "gte"
              },
              "combinator": "and"
            }
          ]
        },
        "options": {}
      },
      "name": "Check File Size",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        400,
        0
      ],
      "id": "check-file-size"
    },
    {
      "parameters": {
        "url": "http://fastapi-service:8000/upload",
        "method": "POST",
        "sendBinaryData": true,
        "binaryPropertyName": "data",
        "options": {}
      },
      "name": "Send to Chunker",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        600,
        -100
      ],
      "id": "send-to-chunker"
    },
    {
      "parameters": {
        "mode": "jsonToBinary",
        "sourceKey": "json.chunks",
        "options": {}
      },
      "name": "Extract Chunks",
      "type": "n8n-nodes-base.moveData",
      "typeVersion": 1,
      "position": [
        800,
        -100
      ],
      "id": "extract-chunks"
    },
    {
      "parameters": {
        "batchSize": 1
      },
      "name": "Process Each Chunk",
      "type": "n8n-nodes-base.splitInBatches",
      "typeVersion": 1,
      "position": [
        1000,
        -100
      ],
      "id": "process-each-chunk"
    },
    {
      "parameters": {
        "resource": "audio",
        "operation": "transcribe",
        "binaryPropertyName": "=data",
        "options": {}
      },
      "name": "Transcribe Chunk",
      "type": "@n8n/n8n-nodes-langchain.openAi",
      "typeVersion": 1.8,
      "position": [
        1200,
        -100
      ],
      "id": "transcribe-chunk"
    },
    {
      "parameters": {
        "mode": "combine",
        "combinationMode": "multiplex",
        "options": {}
      },
      "name": "Combine Transcriptions",
      "type": "n8n-nodes-base.merge",
      "typeVersion": 2,
      "position": [
        1400,
        -100
      ],
      "id": "combine-transcriptions"
    },
    {
      "parameters": {
